// Code generated by go-bindata.
// sources:
// bindata.go
// en-us.all.yaml
// fr-be.all.yaml
// translation.go
// DO NOT EDIT!

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(436), modTime: time.Unix(1457478284, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _enUsAllYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x94\xcb\x4e\xf3\x30\x10\x85\xf7\x7d\x8a\x79\x81\xbf\x0f\xd0\x6d\xa5\x7f\x87\x40\x42\xb0\xb5\x4c\xec\xb4\x23\x92\x99\xe0\xd8\x81\xaa\xea\xbb\xe3\x4b\x4a\xc1\x97\xae\x12\xcd\x7c\xe7\x78\x72\x34\xce\x3f\x40\xb5\x83\x6e\x5e\xc4\x51\x4b\xa5\x8d\xe8\x65\x67\xd9\x88\xd9\x72\xf7\x2e\x1c\xa1\x15\x6c\x42\x3d\xbc\x6e\x00\xac\x91\x34\x0f\xd2\x22\xd3\x0e\xfe\x47\x76\x53\x78\xa0\xd5\xa3\x98\x0c\x2b\xd7\x15\x9a\x27\x5f\x6e\x28\x16\x39\x38\x9d\xf3\xaf\x72\x80\xf3\x79\xbb\x67\x47\xf6\x72\x69\x28\x6b\xc3\xbd\xf8\xda\x5d\x65\xfb\xbb\x1e\x43\x27\x1a\x94\xaa\x14\xcc\x88\x94\x8b\x1e\x90\xb6\x2d\xbc\x76\xc8\x73\xe8\xfc\x3e\x44\x1b\xe3\x83\x57\x68\x84\xf1\xda\x1c\xdf\x4b\x22\xb6\x10\x5a\xd0\x1b\x1e\xc1\x83\x3a\xc4\x7f\xfa\x23\xef\x71\xd0\xa2\xf3\x94\x2d\x92\x5c\x1d\x52\x13\x02\x58\x51\xfa\xc9\x1d\x8d\xd2\xcc\x47\x39\x34\x0c\x7e\xfa\x77\x3c\x16\xd4\x9f\xc2\x72\xc3\xe1\xaa\xb7\x47\x0d\x81\x04\xcb\x21\xb3\xd2\x8a\x27\x5d\xe4\xbc\x7a\x84\x56\x7d\x00\x92\xa3\x16\xc4\xc2\x2f\xa7\x17\x88\x10\x56\xc3\xa3\x47\x52\x90\x30\xff\xe8\xfc\x42\x20\x1d\xc2\x30\x57\x9b\xba\xf7\xe4\xc7\x6f\xa5\x1b\x7b\x75\xfd\x87\xd3\xe6\x94\x16\xa2\x21\x8e\x04\x44\x02\x94\xb4\xf2\x4d\xce\x57\x8b\x18\x47\x3c\xbd\x63\xea\xf1\x90\x3b\xac\xd5\x1c\x46\x5a\x34\xc5\x25\xc9\xf8\x5b\x23\x97\x0c\x5c\x98\xc7\xf9\xe7\x82\x8c\x17\x28\x67\x53\x31\x47\xd7\x9f\x81\xd0\x0b\x0f\x2e\x80\xb9\x6c\x05\xe0\x06\xb4\x2c\xdc\xa4\x2a\xcb\x9d\x75\x73\x71\x35\xf5\x54\xac\xa2\xa2\xbc\xdf\x58\x8e\x94\x50\x76\xc5\xdd\x0e\xa5\x1c\xb6\x5c\x0f\xcc\xaf\x5b\x91\xd9\x64\x74\x8f\x5f\x42\x19\xd9\x17\xde\xa9\xf8\x1d\x00\x00\xff\xff\xaf\x51\x8e\xa2\xb8\x05\x00\x00")

func enUsAllYamlBytes() ([]byte, error) {
	return bindataRead(
		_enUsAllYaml,
		"en-us.all.yaml",
	)
}

func enUsAllYaml() (*asset, error) {
	bytes, err := enUsAllYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "en-us.all.yaml", size: 1464, mode: os.FileMode(436), modTime: time.Unix(1457478270, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _frBeAllYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x94\x4d\x72\xd5\x30\x0c\xc7\xf7\x3d\x85\x2e\x40\x0f\xd0\xed\xdb\xc2\x0c\x33\x0c\x6c\x3d\x26\x56\x78\x86\xc4\x4a\x65\x3b\xd0\xe9\xf4\x2e\xdd\x86\x6b\xe4\x62\xc8\x2f\x29\xed\xb3\x9c\xee\x3c\xb6\x7e\x7f\x7d\x59\xfa\x00\xde\xdd\x41\x17\x67\x73\x46\xeb\x90\x4d\x6f\xbb\x44\x6c\x62\xa2\xee\x97\xc9\xc1\x27\x43\x5c\xee\xcb\xf1\x06\x20\xb1\x0d\x71\xb0\xc9\x53\xb8\x83\x13\x61\xdf\xdf\xde\x28\x0d\x9f\x70\x34\x13\x93\xcb\x9d\x62\x3e\x97\x6b\x91\x6a\x43\xb3\x1d\x32\xd6\xc8\x37\x3b\x60\x66\x78\x7c\xbc\x3d\x51\x0e\xe9\xe9\xe9\x00\x6e\x85\xf8\x55\xee\xf0\x5d\xf4\x38\xbd\xc2\xae\x8b\x64\x39\x8e\x36\x38\xd4\xe8\x56\xa4\xd1\x87\x9a\xfc\xe4\x43\xa3\x2c\xaf\x35\x3d\xf0\xf4\xa5\x18\xec\x1c\x32\x4b\x1b\x9c\x67\xc3\x42\xd7\xc0\x47\x04\x47\x31\x7a\x64\x08\x08\x13\xe6\x04\xeb\xdf\xc4\x08\x43\xbe\xe2\x7b\x3f\xa0\xe9\x44\x21\xa9\xaa\x8a\x44\xef\xbb\xb3\x96\xe8\x78\x5d\xd6\xa5\x21\x23\x99\xe4\x30\x5a\x8e\x67\x3b\xbc\xa3\x26\x76\xb5\x22\x85\x19\x39\xf9\xb6\xe6\xec\xf1\xb7\x49\xa4\x14\x2d\xcc\x19\x0f\x94\x10\x30\x14\x47\x5a\x91\x26\x54\xed\x38\x4c\x95\x72\x51\x53\x22\xc1\x8e\x68\x02\x19\x19\x05\xe1\x4d\xcf\x34\xea\x8e\x21\x6c\xcf\x95\x64\x62\x11\x5d\x17\x84\xf5\x19\x26\x2b\xa1\x32\x38\x89\x5b\x12\xa1\xb1\x9c\xf6\x40\xda\x3e\x05\x88\xaa\x51\xa7\x9a\x55\x1e\x6d\xf9\x3d\x57\x8a\xf7\x19\xf9\x61\xfb\x70\x8d\xba\x32\xde\x67\x61\x11\x24\xfb\x08\x83\x85\xef\x36\x62\x71\xe0\x28\x84\x12\xbb\xc3\x08\x17\x38\x82\x85\x75\xe9\xce\x94\xff\x3b\xb8\x54\xf9\x12\xad\x34\xa3\xf7\x3f\x6a\xfd\xfd\xb6\x36\xf6\xd2\xb8\x20\x9b\xe5\xa1\xb6\xdf\x1e\xac\x67\x54\xcc\x40\x4a\x5d\xd2\x93\x5d\x10\x95\xe9\x65\x8a\x75\x28\x57\x93\xfb\x6a\xbd\xef\x26\x83\x33\x0d\xb9\xd8\xd6\xe4\xba\xbc\xbc\xc0\x74\xb5\xb0\xb4\x46\x9e\x5c\x63\xba\x76\xca\x8c\xeb\xf3\x4f\x85\x36\xfb\x12\xdf\x0c\x7f\x65\x6a\xf4\x86\x91\x92\x31\xea\xc4\x36\x73\xca\x6a\xc3\x44\x2a\x53\xa3\xec\x13\xb5\x2b\x27\x9f\xf7\xa5\x78\xfc\x16\x9a\x18\x7b\xff\xc7\x38\xb6\xbd\x72\x21\x13\x69\x53\x92\xc0\xf0\x5f\x00\x00\x00\xff\xff\x17\xfc\x1c\xe5\x55\x06\x00\x00")

func frBeAllYamlBytes() ([]byte, error) {
	return bindataRead(
		_frBeAllYaml,
		"fr-be.all.yaml",
	)
}

func frBeAllYaml() (*asset, error) {
	bytes, err := frBeAllYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fr-be.all.yaml", size: 1621, mode: os.FileMode(436), modTime: time.Unix(1457478262, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _translationGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\x3d\x6f\x83\x30\x10\x86\x67\xfc\x2b\x4e\x4c\x20\xf1\xa1\x64\xaa\x22\x65\x68\x55\x65\x4d\x07\xf6\xea\x20\x07\xb1\x80\x33\xb2\x4d\x23\xab\xea\x7f\xaf\x2f\x49\x87\xb4\x4b\x17\x06\xfc\xbc\x1f\xf7\x2e\xd8\x8d\x38\x10\xa0\x73\xe4\x95\xd2\xf3\x62\xac\xcf\x54\x92\x0e\xda\x9f\xd7\xb6\xea\xcc\x5c\xb3\xee\x46\xc7\xe1\x44\xb6\x1e\x4c\xa9\x37\x4f\x5c\xcb\x27\x55\xb9\x52\x1f\x68\x23\xdd\x58\x90\x3f\x55\x63\x91\xdd\x84\x9e\x0e\x2b\x77\xf2\x5c\xd7\x10\x25\xad\xe6\x13\x7a\x84\x72\x19\x87\x5b\x12\x54\xaa\x8f\x08\x68\xd6\x3e\xcb\xe1\x53\x25\x91\x6c\x8e\xf0\x7a\x84\x1d\xf4\x11\x07\x64\xe3\xcf\x64\xe1\x82\x01\x66\x0c\x2d\xc1\x25\x36\xba\xa9\x5d\x11\x5d\x41\x5c\x4b\xf1\x55\x89\x59\xfd\xa6\x80\x77\xd8\xed\xe1\x59\x80\x2c\x25\x2e\x57\x57\xe1\x34\x55\x01\xe7\x29\xcd\xaf\xcc\xf6\x91\xe9\x6d\xd9\xd2\x03\x73\x3d\xe2\x0d\xad\xa3\x9f\x4b\xb4\xe1\x83\x9e\xe8\x25\x78\x72\x7f\x5c\x0b\xc9\xfd\x87\xec\x57\x90\xc8\xb6\xb9\xac\x26\x7d\xf6\xf7\xe9\x64\x8f\x3b\x1a\xab\x7c\x7d\x07\x00\x00\xff\xff\x50\x7b\xb8\xd7\x99\x01\x00\x00")

func translationGoBytes() ([]byte, error) {
	return bindataRead(
		_translationGo,
		"translation.go",
	)
}

func translationGo() (*asset, error) {
	bytes, err := translationGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translation.go", size: 409, mode: os.FileMode(436), modTime: time.Unix(1455825052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"en-us.all.yaml": enUsAllYaml,
	"fr-be.all.yaml": frBeAllYaml,
	"translation.go": translationGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"en-us.all.yaml": &bintree{enUsAllYaml, map[string]*bintree{}},
	"fr-be.all.yaml": &bintree{frBeAllYaml, map[string]*bintree{}},
	"translation.go": &bintree{translationGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

