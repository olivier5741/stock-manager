// Code generated by go-bindata.
// sources:
// bindata.go
// en-us.all.yaml
// fr-be.all.yaml
// translation.go
// DO NOT EDIT!

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(436), modTime: time.Unix(1456165592, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _enUsAllYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x94\x4d\x6e\xe3\x30\x0c\x85\xf7\x39\x05\x2f\x30\x39\x40\xb6\x01\x66\x37\x98\x02\x45\xbb\x15\x54\x5b\x4e\x88\xda\xa4\x2b\x4b\x6e\x83\x20\x77\x2f\x25\xdb\xfd\xd1\x4f\x56\x09\x1e\xbf\xf7\xcc\x3c\xd0\xf9\x03\xd8\x1e\xa0\x99\x66\x75\x36\xba\x35\x56\x75\xba\x71\x6c\xd5\xe4\xb8\x79\x55\x9e\xd0\x29\xb6\x41\x0f\x5f\x77\x00\xce\x6a\x9a\x7a\xed\x90\xe9\x00\x7f\x23\xbb\xcb\x32\xd0\x99\x41\x8d\x96\x5b\xdf\x64\x9e\x07\x91\x2b\x8e\x59\xf7\xde\xa4\xfc\xb3\xee\xe1\x7a\xdd\x1f\xd9\x93\xbb\xdd\x2a\xce\xd2\x72\x4f\xa2\xdd\x75\xd6\x7f\xd7\xff\x30\x89\x01\xb9\x6b\x29\x66\x40\x4a\x4d\xff\x90\xf6\x35\xbc\xf4\x90\xc7\x30\xf9\xf9\x10\x63\xad\x14\xdf\xa2\x55\x56\xbc\x29\x7e\xd4\x44\xec\x20\x8c\xa0\xb3\x3c\x80\x80\x26\xd4\x7f\xf9\x65\xef\xb0\x37\xaa\x11\xca\x65\x4d\xae\x09\xcb\x10\x02\x58\x70\xca\xe6\x9e\x06\x6d\xa7\xb3\xee\x2b\x01\x5f\xf3\x3b\x19\x33\x9a\x77\xe5\xb8\x92\xb0\xf9\xdd\xd9\x40\x20\xc1\x71\xe8\x2c\x8f\xe2\xd1\x64\x3d\xaf\x19\x61\x54\x5e\x80\xf4\x60\x14\xb1\x92\xe3\x14\x83\x0a\x65\x55\x32\x3a\xa4\x16\x16\x4c\x3e\x1a\x39\x08\xa4\x53\x58\x66\x8b\x29\x67\x8f\xb2\x7e\xad\xdd\x38\x2b\xfb\xdf\xbc\xb1\x97\xe5\x20\x2a\xe6\x48\x40\x24\xa0\xd5\x4e\xbf\xe8\x69\x8b\x88\x75\xc4\xa7\x37\x4c\x1d\x9e\xd2\x84\x55\x4d\x61\xa4\xd9\x50\x3c\x92\x84\xff\x1e\xa4\x96\x9e\xb3\xf0\xb8\xff\x94\x91\xf1\x05\x4a\xd9\x45\x4c\xd1\xca\x9f\xc1\x2a\xe7\xd1\xc5\x96\x16\xb1\x88\xaa\xfc\x7d\x14\xa5\x8c\xca\xbb\x8b\x83\xcf\x6e\x62\x93\xcb\x26\xf6\xd9\xf2\x41\x4a\x61\xc7\xe5\x56\xe4\xa6\xb2\x62\x46\x6b\x3a\xfc\x50\xad\xd5\x5d\x96\xbd\x88\x9f\x01\x00\x00\xff\xff\x8e\xac\xcd\x92\x9d\x05\x00\x00")

func enUsAllYamlBytes() ([]byte, error) {
	return bindataRead(
		_enUsAllYaml,
		"en-us.all.yaml",
	)
}

func enUsAllYaml() (*asset, error) {
	bytes, err := enUsAllYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "en-us.all.yaml", size: 1437, mode: os.FileMode(436), modTime: time.Unix(1456164978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _frBeAllYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x94\x4b\x6e\xdc\x30\x0c\x86\xf7\x39\x05\x2f\xd0\x1c\x20\xdb\xd9\xb6\x40\x81\xa2\xdd\x0a\xac\x45\x77\x84\xda\xa2\x43\x49\xd3\x06\x41\xee\xd2\xed\xf4\x1a\xbe\x58\xa8\x99\xc9\x63\x44\x39\x3b\x83\xe6\xff\xf1\x25\xf2\x13\x04\x7f\x07\x43\x3a\xb8\x3d\xa1\x27\x71\x23\x0e\x99\xc5\xa5\xcc\xc3\x6f\x57\x62\xc8\x8e\xa5\xda\xeb\xe7\x0d\x40\x16\x8c\x69\xc2\x1c\x38\xde\xc1\x8e\x69\x1c\x6f\x6f\x0c\x23\x64\x9a\xdd\x22\xec\xcb\x60\x34\x5f\xab\x59\x51\x7d\xd1\x01\xa7\x42\xad\xe4\x07\x4e\x54\x04\x1e\x1f\x6f\x77\x5c\x62\x7e\x7a\xda\x10\xf7\x52\xfc\xae\x36\xfa\x50\xba\x5d\x5e\xd5\xae\x47\xad\x72\x9e\x31\x7a\xb2\xd2\x73\x93\xe6\x10\x5b\xe5\x97\x10\x3b\x6d\x79\xeb\xe9\x46\xa4\x6f\xd5\xe1\xa2\x23\x11\x1d\x83\x0f\xe2\x44\xd5\xad\xe0\x33\x81\xe7\x94\x02\x09\x44\x82\x85\x4a\x86\xf5\x7f\x16\x82\xa9\x5c\xe9\xc7\x30\x91\x1b\x94\x90\x4d\x57\x15\x31\x86\x61\x6f\x11\x83\xac\xc7\xf5\xd8\xc1\x68\x25\x25\xce\x28\x69\x8f\xd3\x07\x34\xf5\x6b\x89\x1c\x0f\x24\x39\xf4\x99\x87\x40\x7f\x5c\x66\x43\x44\x38\x14\xda\x20\x11\x50\xac\x81\x2c\x91\x17\x32\xe3\xd8\x2c\x95\x4b\xa5\x19\x48\xc4\x99\x5c\x64\xa7\xab\xa0\x7a\x37\x0a\xcf\x76\x62\x04\xe7\xdf\x0d\x32\x8b\x42\xd7\x23\xc1\xfa\x0f\x16\xd4\x54\x05\xbc\xe6\xad\x85\xf0\x5c\xbf\x2e\x89\xf4\x63\xaa\x20\x99\x41\xed\x5a\xad\x89\x88\xf5\xf5\x5c\x11\xef\x0b\xc9\xc3\xf9\xc1\x75\xfa\x2a\x74\x5f\x54\x4b\xa0\xd5\x27\x98\x10\x7e\x62\xa2\x1a\xc0\x73\x8c\x35\x77\x4f\x09\x4e\xe2\x04\x08\xeb\x71\xd8\x73\x79\x0d\x70\xea\xf2\x29\x5b\x1d\xc6\x18\x7e\xb5\xfc\x8b\xb5\x75\x0e\x3a\xb8\xa8\x97\xe5\xa1\xf5\x3f\xff\xc0\x20\x64\x34\x13\x1b\xba\x96\xa7\xb7\x20\x19\xd7\xd3\x16\xdb\x54\xae\x36\xf7\xcd\x7b\xe3\x36\x2d\xe7\xdb\x64\xe9\xdd\x46\xa6\x77\xdb\xda\xb8\x3a\x7b\x12\xb4\x46\x21\x9b\xc9\xeb\x09\x09\x73\x31\x8f\xec\xc5\xdc\x17\x71\x31\x05\x24\xae\xbb\x61\xfc\x33\xf7\xfb\xa3\x4f\xf4\xa5\x45\xf2\x5e\xb4\x08\x8d\xe1\xaf\xf3\x82\xa3\x09\xa1\x7b\x87\x39\x6b\x35\xf4\x1c\x00\x00\xff\xff\x6a\x63\x54\x45\x3b\x06\x00\x00")

func frBeAllYamlBytes() ([]byte, error) {
	return bindataRead(
		_frBeAllYaml,
		"fr-be.all.yaml",
	)
}

func frBeAllYaml() (*asset, error) {
	bytes, err := frBeAllYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fr-be.all.yaml", size: 1595, mode: os.FileMode(436), modTime: time.Unix(1456165561, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _translationGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\x3d\x6f\x83\x30\x10\x86\x67\xfc\x2b\x4e\x4c\x20\xf1\xa1\x64\xaa\x22\x65\x68\x55\x65\x4d\x07\xf6\xea\x20\x07\xb1\x80\x33\xb2\x4d\x23\xab\xea\x7f\xaf\x2f\x49\x87\xb4\x4b\x17\x06\xfc\xbc\x1f\xf7\x2e\xd8\x8d\x38\x10\xa0\x73\xe4\x95\xd2\xf3\x62\xac\xcf\x54\x92\x0e\xda\x9f\xd7\xb6\xea\xcc\x5c\xb3\xee\x46\xc7\xe1\x44\xb6\x1e\x4c\xa9\x37\x4f\x5c\xcb\x27\x55\xb9\x52\x1f\x68\x23\xdd\x58\x90\x3f\x55\x63\x91\xdd\x84\x9e\x0e\x2b\x77\xf2\x5c\xd7\x10\x25\xad\xe6\x13\x7a\x84\x72\x19\x87\x5b\x12\x54\xaa\x8f\x08\x68\xd6\x3e\xcb\xe1\x53\x25\x91\x6c\x8e\xf0\x7a\x84\x1d\xf4\x11\x07\x64\xe3\xcf\x64\xe1\x82\x01\x66\x0c\x2d\xc1\x25\x36\xba\xa9\x5d\x11\x5d\x41\x5c\x4b\xf1\x55\x89\x59\xfd\xa6\x80\x77\xd8\xed\xe1\x59\x80\x2c\x25\x2e\x57\x57\xe1\x34\x55\x01\xe7\x29\xcd\xaf\xcc\xf6\x91\xe9\x6d\xd9\xd2\x03\x73\x3d\xe2\x0d\xad\xa3\x9f\x4b\xb4\xe1\x83\x9e\xe8\x25\x78\x72\x7f\x5c\x0b\xc9\xfd\x87\xec\x57\x90\xc8\xb6\xb9\xac\x26\x7d\xf6\xf7\xe9\x64\x8f\x3b\x1a\xab\x7c\x7d\x07\x00\x00\xff\xff\x50\x7b\xb8\xd7\x99\x01\x00\x00")

func translationGoBytes() ([]byte, error) {
	return bindataRead(
		_translationGo,
		"translation.go",
	)
}

func translationGo() (*asset, error) {
	bytes, err := translationGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translation.go", size: 409, mode: os.FileMode(436), modTime: time.Unix(1455825052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"en-us.all.yaml": enUsAllYaml,
	"fr-be.all.yaml": frBeAllYaml,
	"translation.go": translationGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"en-us.all.yaml": &bintree{enUsAllYaml, map[string]*bintree{}},
	"fr-be.all.yaml": &bintree{frBeAllYaml, map[string]*bintree{}},
	"translation.go": &bintree{translationGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

